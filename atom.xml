<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>rand9</title>
  <link href="http://rand9.com/atom.xml" rel="self"/>
  <link href="http://rand9.com/"/>
  <updated>2011-08-21T13:50:30-06:00</updated>
  <id>http://rand9.com/</id>
  <author>
    <name>BJ Neilsen</name>
    
  </author>

  
  <entry>
    <title>Binary search in ruby, or, "Picking the right number, as quickly as possible"</title>
    <link href="http://rand9.com/blog/picking-the-right-number-as-quickly-as-possible"/>
    <updated>2011-07-01T10:25:38-06:00</updated>
    <id>http://rand9.com/blog/picking-the-right-number-as-quickly-as-possible</id>
    <content type="html">&lt;p&gt;So you're writing a parser in C that parses the lines of a file. The line you're parsing is made up of a 40 character key and any number of ip addresses after, space-separated. You need to know a max line length to read (because C is mean like that), but you're not sure how many ip's you can fit on a line for a given key.&lt;/p&gt;

&lt;p&gt;Such was my case yesterday and decided to write a mini script in ruby to figure it out. My first stab was to iterate from 1 to 100 and checking the line lengths by literally building a line with x number of ip elements on the line. While the code was correct and produced the necessary information for the given inputs, it was horribly inefficient and so I decided to rewrite it to be smarter. Enter the &lt;a href=&quot;http://en.wikipedia.org/wiki/Binary_search_algorithm&quot; title=&quot;Binary Search Algorithm&quot;&gt;Binary search algorithm&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Using the binary search algorithm, we take a lower and an upper bound of possible elements and try to quickly guess which number is the highest possible without exceeding the line limit. So here's the concrete data we know. The line format (as described above) will look something like this:&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;86f7e437faa5a7fce15d1ddcb9eaeaea377667b8 174.18.0.1 174.18.0.2 174.18.0.3 174.18.0.4 174.18.0.5 174.18.0.6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;... with theoretically unlimited ips per line. The first value is a key we'll use to store the ips against in a lookup table, but don't worry about that right now. The key is generated using sha1 digesting, so we know it will always be 40 characters. The max length for any given ip address is 15 assuming all 4 blocks are at least valued at 100 (e.g. 100.100.100.100). Space-separating the key and x number of ips and your line length calculation is &lt;code&gt;f(x) = kl + (el*x) + x&lt;/code&gt; where &lt;code&gt;x&lt;/code&gt; is line length, &lt;code&gt;kl&lt;/code&gt; is key length, and &lt;code&gt;el&lt;/code&gt; is element length (ip address length). In other words, if we're testing 50 elements on the line, the line length would be &lt;code&gt;40 + (15*50) + 50&lt;/code&gt; which equals &lt;code&gt;840&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that we can arbitrarily calculate the length of a line based on the number of ip elements we want to test, we can start &quot;guessing&quot;. This isn't guessing at all, we just split our possible range in half and use the middle ground to test the possible length. In other words, if my initial range is 1..100 (read as &quot;anywhere from 1 ip element to 100 ip elements&quot;), then our first test value for &lt;code&gt;x&lt;/code&gt; above would be 50, which if you remember produces a line length of 840. I assumed that I'd be okay with a max line length of 1000 characters, and so we assert that if &lt;code&gt;len&lt;/code&gt; is less than the max, then we can use the upper half of the range boundary, or &lt;code&gt;50..100&lt;/code&gt;. If &lt;code&gt;len&lt;/code&gt; was more than our max of 1000, we'd take the bottom half, or &lt;code&gt;1..50&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Using this technique recursively we can whittle down to the exact number of ip elements that can be inserted on a line before we go over the limit of 1000 characters on the line, which happens to be 60. You know you're done checking when your range is only one element apart, in this case 60..61. With my first solution to iterate up from 1 to 100, this meant we had to check 61 times before we knew we were over the limit. &lt;strong&gt;With this new range, we actually only needed 8 iterations!&lt;/strong&gt; Very cool how &quot;guessing&quot; can solve the problem quite nicely.&lt;/p&gt;

&lt;p&gt;``` ruby&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require 'digest/sha1'

@k_len = Digest::SHA1.hexdigest('a').size     # 40
@ip_len = &quot;255.255.255.255&quot;.size              # 15
@range = 1..100                               # starting range
@max_line_len = 1000                          # length to check against
@count = 0                                    # iteration counter

# Given a upper and lower boundary, determine if its
# middle value is over or under the given line length
# If over, use the lower boundary (lower..mid) for a recursive check,
# otherwise use upper boundary (mid..upper)
def check_boundary(lower, upper)
  # determine middle value
  mid = lower + ((upper-lower)/2)
  # Exit recursion if we've found the value
  throw(:found_value, mid) if (upper-lower) == 1

  # only increment iter count if we're checking the length
  @count += 1
  # Get the line length for the variable number of elements
  len = @k_len + (@ip_len*mid) + mid

  # Perform the test
  if len &amp;gt; @max_line_len
    puts_stats lower, mid, upper, len, :over
    # use the lower boundary
    check_boundary(lower, mid)
  else
    puts_stats lower, mid, upper, len, :under
    # use the upper boundary
    check_boundary(mid, upper)
  end
end

# Log method for values in a given test
def puts_stats lower, mid, upper, len, over_under
  puts '%10d | %10d | %10d | %10d | %10s' % [lower, mid, upper, len, over_under]
end

# Specify some information for readability
puts 'Determining how many ip elements can sit on a line with a max length of %d' % @max_line_len
puts 
legend = '%10s | %10s | %10s | %10s | %10s' % %w(lower mid/test upper len over/under)
puts legend
puts '-'*legend.size

# Run the recursive boundary checking
golden_ticket = catch(:found_value) do
  check_boundary(@range.first, @range.last)
end

# Output results
puts
puts 'Golden Ticket (under) = %s' % golden_ticket.to_s
possible_iterations = @range.last-@range.first
efficiency = @count.to_f / possible_iterations.to_f
puts '%d iterations for %d possible iterations (%f efficiency)' % [@count, possible_iterations, efficiency]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Running the above script will produce the following output:&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Determining how many ip elements can sit on a line with a max length of 1000

     lower |   mid/test |      upper |        len | over/under
--------------------------------------------------------------
         1 |         50 |        100 |        840 |      under
        50 |         75 |        100 |       1240 |       over
        50 |         62 |         75 |       1032 |       over
        50 |         56 |         62 |        936 |      under
        56 |         59 |         62 |        984 |      under
        59 |         60 |         62 |       1000 |      under
        60 |         61 |         62 |       1016 |       over

Golden Ticket (under) = 60
8 iterations for 99 possible iterations (0.080808 efficiency)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;I'm not really sure if the efficiency part makes sense, but you get a sense that it's a LOT faster, not only because we're calculating the line length per test, but also because we're recursing a fraction of calls that the brute force method performs. It's also fun to inflate/deflate the max line len or the starting range values to see how it affects the number of recursions needed to find the number. For instance, set the max line len to 100000 and see how many extra calls have to be made. Also, what happens if your range isn't big enough? What if the range is off (e.g. 75..100)?&lt;/p&gt;

&lt;p&gt;Algorithms are nifty.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Git pre-receive hook for rejecting a bad Gemfile</title>
    <link href="http://rand9.com/blog/git-pre-receive-hook-for-rejecting-a-bad-gemfile"/>
    <updated>2011-07-01T09:16:46-06:00</updated>
    <id>http://rand9.com/blog/git-pre-receive-hook-for-rejecting-a-bad-gemfile</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://gembundler.com&quot; title=&quot;Bundler&quot;&gt;Bundler&lt;/a&gt; has a cool facility with &lt;code&gt;Gemfile&lt;/code&gt;s that allow you to specify some fine-grained options for a given gem beyond specifying a version. Things like &lt;code&gt;:path&lt;/code&gt;, &lt;code&gt;:branch&lt;/code&gt;, &lt;code&gt;:git&lt;/code&gt;, and &lt;code&gt;:tag&lt;/code&gt;. All of those things are neat for development, but horrible for production. I wanted a way to reject pushes to a repo if the Gemfile was changed to include any one of those options, and a git pre-receive hook was just the tonic.&lt;/p&gt;

&lt;p&gt;``` ruby&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env ruby

BRANCHES = %w( master stable )
REJECT_OPTIONS = %w( git tag branch path )

old_sha, new_sha, ref = STDIN.read.split(' ')
exit 0 unless BRANCHES.include?(ref.split('/').last)

diff = %x{ git diff-index --cached --name-only #{old_sha} 2&amp;gt; /dev/null }
if diff.is_a?(String)
  diff = diff.split(&quot;\n&quot;)
end

if diff.detect{|file| file =~ /^Gemfile$/}
  tree = %x{ git ls-tree --full-name #{new_sha} Gemfile 2&amp;gt; /dev/null }.split(&quot; &quot;)
  contents = %x{ git cat-file blob #{tree[2]} 2&amp;gt; /dev/null }

  invalid_lines = contents.each_line.select do |line|
    line =~ /\b(#{REJECT_OPTIONS.join('|')})\b/
  end

  unless invalid_lines.empty?
    puts
    puts '&amp;gt; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'
    puts '&amp;gt; ---- PUSH REJECTED by origin ----'
    puts '&amp;gt;'
    puts &quot;&amp;gt; You've specified an invalid option for #{invalid_lines.size} gem definitions in the Gemfile&quot;
    puts &quot;&amp;gt; Invalid options are: #{REJECT_OPTIONS.join(', ')}&quot;
    puts '&amp;gt;'
    puts &quot;&amp;gt; The offending gems:&quot;
    puts &quot;&amp;gt;\t&quot; + invalid_lines.join(&quot;&amp;gt;\t&quot;)
    puts '&amp;gt;'
    puts '&amp;gt; To fix:'
    puts &quot;&amp;gt;\t* Remove the offending options&quot;
    puts &quot;&amp;gt;\t* bundle install&quot;
    puts &quot;&amp;gt;\t* Run tests&quot;
    puts &quot;&amp;gt;\t* Ammend previous commit (git add . &amp;amp;&amp;amp; git commit --amend)&quot;
    puts &quot;&amp;gt;\t* git push origin #{ref.split('/').last}&quot;
    puts '&amp;gt;'
    puts '&amp;gt; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'
    puts

    exit 1
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;The script above monitors pushes to the &quot;master&quot; and &quot;stable&quot; branches (our development and production lines, respectively). It checks to see if the Gemfile was listed in the new commit file list, then parses the blob of the Gemfile for any of the offending options. Each offending line is then output back to the pushing developer with instructions on how to fix his/her Gemfile and how to amend the commit. Here's what the output looks like:&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git push origin master
  Counting objects: 5, done.
  Delta compression using up to 8 threads.
  Compressing objects: 100% (3/3), done.
  Writing objects: 100% (3/3), 362 bytes, done.
  Total 3 (delta 0), reused 0 (delta 0)
  Unpacking objects: 100% (3/3), done.
  remote: 
  remote: &amp;gt; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  remote: &amp;gt; ---- PUSH REJECTED by origin ----
  remote: &amp;gt;
  remote: &amp;gt; You've specified an invalid option for 2 gem definitions in the Gemfile
  remote: &amp;gt; Invalid options are: git, tag, branch, path
  remote: &amp;gt;
  remote: &amp;gt; The offending gems:
  remote: &amp;gt; gem 'utilio', :git =&amp;gt; 'git@github.com:localshred/utilio.git'
  remote: &amp;gt; gem 'rails', :git =&amp;gt; 'git@github.com:rails/rails.git'
  remote: &amp;gt;
  remote: &amp;gt; To fix:
  remote: &amp;gt; * Remove the offending options
  remote: &amp;gt; * bundle install
  remote: &amp;gt; * Run tests
  remote: &amp;gt; * Ammend previous commit (git add . &amp;amp;&amp;amp; git commit --amend)
  remote: &amp;gt; * git push origin master
  remote: &amp;gt;
  remote: &amp;gt; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  remote: 
  To git@git.mycompany.com:repo1.git
   ! [remote rejected] master -&amp;gt; master (pre-receive hook declined)
  error: failed to push some refs to 'git@git.mycompany.com:repo1.git'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;It's also worth noting that since this is a pre-receive hook, when returning an exit status of anything but 0, git will reject merging the commits. This is good because we don't want &quot;bad code&quot; in our repo. You could also use this to do other checking measures, such as running a CI build or syntax checks.&lt;/p&gt;

&lt;p&gt;To use the above hook, simply copy the script above into the &lt;code&gt;./hooks/pre-receive&lt;/code&gt; file in your origin repo. Be sure to &lt;code&gt;chmod +x ./hooks/pre-receive&lt;/code&gt; otherwise git won't be able to invoke the script when a new push occurs. We have ~15 repos that I manage at work that I want to use the hook on, so I just kept the file out on the git user's home directory and symlinked it back to each repos hooks directory. Same results, just easier to manage if I need to make a quick change to the hook.&lt;/p&gt;

&lt;p&gt;Happy coding.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Thor script for managing a Unicorn-driven app</title>
    <link href="http://rand9.com/blog/thor-script-for-managing-a-unicorn-driven-app"/>
    <updated>2011-01-25T22:04:37-07:00</updated>
    <id>http://rand9.com/blog/thor-script-for-managing-a-unicorn-driven-app</id>
    <content type="html">&lt;p&gt;Today I deployed a mini sinatra app on one of our test servers to manage some internal QA. I've put out quite a few apps backed by &lt;a href=&quot;http://unicorn.bogomips.org/&quot; title=&quot;Unicorn specification&quot;&gt;Unicorn&lt;/a&gt; in QA recently and finally wrote a little script to handle stopping, starting, and reloading of the unicorn processes. Nothing super special here, just thought I'd share a useful script. Drop the following code into your application's &lt;code&gt;tasks&lt;/code&gt; directory, or place it on the app root and call it &lt;code&gt;Thorfile&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;tasks/unicorn.thor (or Thorfile)&lt;/h3&gt;

&lt;p&gt;``` ruby&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# put me in /path/to/app/tasks/unicorn.thor
require 'thor'

class UnicornRunner &amp;lt; Thor
  include Thor::Group

  namespace :unicorn

  UNICORN_CONFIG = &quot;/path/to/app/config/unicorn.rb&quot;
  RACKUP_FILE = &quot;/path/to/app/config.ru&quot;
  PID_FILE = &quot;/path/to/app/tmp/application.pid&quot;

  desc 'start', 'Start the application'
  def start
    say 'Starting the application...', :yellow
    `bundle exec unicorn -c #{UNICORN_CONFIG} -E production -D #{RACKUP_FILE}`
    say 'Done', :green
  end

  desc 'stop', 'Stop the application'
  def stop
    say 'Stopping the application...', :yellow
    `kill -QUIT $(cat #{PID_FILE})`
    say 'Done', :green
  end

  desc 'reload', 'Reload the application'
  def reload
    say 'Reloading the application...', :yellow
    `kill -USR2 $(cat #{PID_FILE})`
    say 'done', :green
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h3&gt;Usage&lt;/h3&gt;

&lt;p&gt;From your application root directory, run any of the three commands. Keep in mind you'll need a unicorn config file that actually dictates how &lt;a href=&quot;http://unicorn.bogomips.org/&quot; title=&quot;Unicorn specification&quot;&gt;Unicorn&lt;/a&gt; should behave (like number of workers, where your logs go, etc). You'll also need a &lt;a href=&quot;http://rack.rubyforge.org/doc/SPEC.html&quot; title=&quot;Rack specification&quot;&gt;Rackup&lt;/a&gt; file (&lt;code&gt;config.ru&lt;/code&gt;) which tells unicorn how to run your app.&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ thor -T
# thor unicorn:start    Start the application
# thor unicorn:stop     Stop the application
# thor unicorn:reload   Reload the application

$ thor unicorn:start    # starts the unicorn master
$ thor unicorn:stop     # sends the QUIT signal to master (graceful shutdown)
$ thor unicorn:reload   # sends the USR2 signal to master (graceful reload of child workers)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Plop this puppy behind &lt;a href=&quot;http://wiki.nginx.org/Main&quot; title=&quot;Nginx web server&quot;&gt;nginx&lt;/a&gt; and you're golden. &lt;a href=&quot;https://github.com/wycats/thor&quot; title=&quot;Thor scripting library of Ruby&quot;&gt;Thor&lt;/a&gt; has a lot more things you could do with this (like overriding which config file to use) by providing method-level options, but this is a great starting point for most people. Leave a comment if you have any improvements or other ways you handle this.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Mapping object values with Ruby's ampersand-symbol technique</title>
    <link href="http://rand9.com/blog/mapping-object-values-with-rubys-ampersand-symbol-technique"/>
    <updated>2011-01-07T22:39:31-07:00</updated>
    <id>http://rand9.com/blog/mapping-object-values-with-rubys-ampersand-symbol-technique</id>
    <content type="html">&lt;p&gt;Discovered another little Ruby nugget the other day. The nugget gives a shorter syntax when you want to map the return value of a message sent to a list of objects, say, the name of the class of the object. In the past I would use &lt;code&gt;Array#map&lt;/code&gt; to produce the list with something like:&lt;/p&gt;

&lt;p&gt;``` ruby&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;objects = [1, :number_1, &quot;1&quot;]  
classes = objects.map {|o| o.class }
classes.inspect
# =&amp;gt; [Fixnum, Symbol, String]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Turns out that Ruby has a shortcut that shortens your keystrokes a bit:&lt;/p&gt;

&lt;p&gt;``` ruby&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;objects = [1, :number_1, &quot;1&quot;]  
classes = objects.map(&amp;amp;:class)
classes.inspect
# =&amp;gt; [Fixnum, Symbol, String]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;The two snippets are functionally identical. By passing a symbol to map preceded by an ampersand, Ruby will call &lt;code&gt;Symbol#to_proc&lt;/code&gt; on the passed symbol (e.g. &lt;code&gt;:class.to_proc&lt;/code&gt;), which returns a proc object like &lt;code&gt;{|o| o.class }&lt;/code&gt;. Where would you use this you ask? The day I learned this little ditty I was writing some tests that were verifying some active record associations. Whenever I needed to update values on a &lt;code&gt;has_many&lt;/code&gt; collection for a particular model, I actually needed to assert that the associated collection of objects were rebuilt with the new values, deleting the old rows and recreating new ones. The ampersand-symbol technique above was nice for this.&lt;/p&gt;

&lt;p&gt;``` ruby&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;describe Father do
  it 'should create new children when I attempt to update the children' do
    father = Factory(:father)
    orig_children = father.children.map(&amp;amp;:id)
    # perform the update method
    father.reload
    father.children.map(&amp;amp;:id).should_not == orig_children
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;So I thought I'd pass the word on. &lt;strong&gt;Cool stuff in Ruby.&lt;/strong&gt; Who knew?&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Areas of Focus</title>
    <link href="http://rand9.com/blog/areas-of-focus"/>
    <updated>2011-01-02T00:18:33-07:00</updated>
    <id>http://rand9.com/blog/areas-of-focus</id>
    <content type="html">&lt;p&gt;In 2009 I created a website to keep track of the &lt;a href=&quot;http://www.onesimplegoal.com&quot; title=&quot;One Simple Goal&quot;&gt;simple goals&lt;/a&gt; in my life. It was a new way to set goals for me: set one simple goal each day. &lt;a href=&quot;http://www.onesimplegoal.com&quot; title=&quot;One Simple Goal&quot;&gt;One Simple Goal&lt;/a&gt; was born out of a few days of work, because the concept is simple, and as you all know, &lt;a href=&quot;http://www.rand9.com/blog/why_i_went_minimal&quot; title=&quot;Why I went minimal&quot;&gt;I like simplicity&lt;/a&gt;. It helps me focus on what matters most, while assisting me in &lt;a href=&quot;http://bjneilsen.wordpress.com/2009/04/20/purge-and-simplify/&quot; title=&quot;Purge and Simplify&quot;&gt;ignoring what doesn't&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the lead-up to 2011, I've been quietly thinking about what types of resolutions I will make, if any. Typically in the past I've shied away from making grandiose resolutions, usually just picking certain directions I'd like my life to flow, and then storing them as high-level ideals about my life. This year will be different.&lt;/p&gt;

&lt;p&gt;Not different in that I'll be buying that gym pass or whatever cliche's abound when talking about resolutions. No, I am fairly certain I won't be doing that kind of generalized stuff any time soon. Different because I'll be more concrete about two things: 1) Focus, and 2) Timeframe. Humans generally love to set goals, and almost always find a way to not achieve them. I'm no different. But when I realized that I still wanted the results of those goals, I stumbled on the idea of making a simple goal every day. No long to-do lists, no lofty &quot;Mount Everest&quot; goals. Simple things, &lt;a href=&quot;http://onesimplegoal.com/localshred&quot;&gt;like&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Finally paint wall patches I did last August. Go me.&lt;/li&gt;
&lt;li&gt;Push out some code to OSG. Anything.&lt;/li&gt;
&lt;li&gt;Write the first of the ruby daily series&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Fast-forward to tonight when I realized that OSG is exactly how I should be determining (and implementing) my goals for 2011, with a few tweaks. The first and most noticeable tweak is the &lt;strong&gt;time frame&lt;/strong&gt;. Instead of limiting my goal work to one day, it'll be 2 to 4 weeks, with a preference to lean on a full month. The &lt;strong&gt;focus&lt;/strong&gt; aspect changes slightly also, as it's easy to set a specific focus for a given day, but more challenging to do so for a given month. I have a few ideas about how using a system like &lt;a href=&quot;http://en.wikipedia.org/wiki/Scrum_(development)&quot; title=&quot;Scrum project management&quot;&gt;Scrum&lt;/a&gt; can help me achieve real focus with a longer time frame. Keep in mind that as with OSG, the idea is that you have something concrete that you can say: &quot;I did (insert goal here)&quot;. So things like &quot;Become more good looking&quot; don't count because they're arbitrary in what their completion may look like. We're looking for concrete goals, things that (as Seth Godin says) &lt;a href=&quot;http://sethgodin.typepad.com/seths_blog/2010/06/fear-of-shipping.html&quot; title=&quot;Seth Godin, Fear of shipping&quot;&gt;&lt;strong&gt;&lt;em&gt;you actually ship&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;. The concept of shipping is paramount.&lt;/p&gt;

&lt;p&gt;I threw a list together on &lt;a href=&quot;http://www.springpadit.com&quot; title=&quot;My SpringPad (localshred)&quot;&gt;SpringPad&lt;/a&gt; with a few ideas that I plan on thinking into a little further, but the first month is more or less solidified in my mind as to what I'll be working on (and yes, it actually is scary to me, in a good way). The over arching focus for 2011 is to develop myself further. 2010 was a banner year for me professionally, and 2011 is poised to be the same or more. But something I felt was lacking was a commitment to be better, not for my career or job, just for me. So 2011's list looks like that.&lt;/p&gt;

&lt;p&gt;One over-arching goal that falls out of this framework is that I want to get back into writing. I was &lt;a href=&quot;http://bjneilsen.wordpress.com&quot; title=&quot;My old blog&quot;&gt;into blogging&lt;/a&gt; in '07 and '08 and thoroughly enjoyed it. Not the page-views and all that garbage, just the act of writing about something. Anything. I want to enjoy it again. With all that in mind, I've decided that I'm going to work hard at documenting my ride through 2011 and the way I'm setting this whole thing up. Hopefully it'll help somebody out, but mostly it's for my own records and enjoyment.&lt;/p&gt;

&lt;p&gt;So here are a few rules for setting goals this year. And yes, I just made them up.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Only concrete goals that can be definitively completed within a month are allowed. Can you answer &quot;Yes&quot; or &quot;No&quot; to the question: &lt;strong&gt;&lt;em&gt;Did you ship it?&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Do things that are worthwhile and that stretch me. No maintaining of status quo, go beyond.&lt;/li&gt;
&lt;li&gt;Planning for the month's goals happens at the &lt;em&gt;beginning&lt;/em&gt; of the month, preferably the first day of the month. Plan &lt;em&gt;only&lt;/em&gt; for the current month (iteration).&lt;/li&gt;
&lt;li&gt;Retrospectives about what was or wasn't completed happen at the &lt;em&gt;end&lt;/em&gt; of the month. Honesty is key here.&lt;/li&gt;
&lt;li&gt;Blog often.&lt;/li&gt;
&lt;li&gt;Have Fun.&lt;/li&gt;
&lt;li&gt;Write more lists like &lt;a href=&quot;http://ryanbyrd.net&quot; title=&quot;RyanByrd.net&quot;&gt;Ryan&lt;/a&gt; ;).&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;I'll post more soon. &lt;strong&gt;In the meantime, why don't you go &lt;a href=&quot;http://www.onesimplegoal.com&quot; title=&quot;One Simple Goal&quot;&gt;set some simple goals&lt;/a&gt;?&lt;/strong&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Intersecting arrays in Ruby</title>
    <link href="http://rand9.com/blog/intersecting-arrays-in-ruby"/>
    <updated>2010-09-22T14:34:18-06:00</updated>
    <id>http://rand9.com/blog/intersecting-arrays-in-ruby</id>
    <content type="html">&lt;p&gt;Just found a slightly satisfying approach to checking the contents of an array in ruby.&lt;/p&gt;

&lt;p&gt;I like using &lt;a href=&quot;http://ruby-doc.org/core/classes/Array.html#M002203&quot; title=&quot;Array#include?&quot;&gt;&lt;code&gt;Array#include?&lt;/code&gt;&lt;/a&gt; to figure out whether or not my given array has a certain entry. Unfortunately, if you want to check if an array has a set of possible values, such as, does it contain &lt;code&gt;:a&lt;/code&gt; &lt;em&gt;or&lt;/em&gt; &lt;code&gt;:b&lt;/code&gt;, you can't just pass an array of those values. Let me show you what I mean:&lt;/p&gt;

&lt;p&gt;``` ruby&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;food = [:milk, :bread, :butter]
food1 = [[:milk, :bread], :butter]
expected = [:milk, :bread]
food.include?(:milk) # =&amp;gt; true
food.include?(expected) # =&amp;gt; false
food1.include?(expected) # =&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;In other words, &lt;code&gt;include?&lt;/code&gt; is very specific about the way it does the matching. But what if I want &lt;code&gt;food.include?(expected)&lt;/code&gt; to tell me if &lt;code&gt;food&lt;/code&gt; has any of &lt;code&gt;expected&lt;/code&gt;'s values? Enter &lt;a href=&quot;http://ruby-doc.org/core/classes/Array.html#M002212&quot; title=&quot;Array#&amp;amp;&quot;&gt;&lt;code&gt;Array#&amp;amp;&lt;/code&gt;&lt;/a&gt;. It doesn't make &lt;code&gt;include?&lt;/code&gt; do anything different, but does give us a simple way to get this newer behavior:&lt;/p&gt;

&lt;p&gt;``` ruby&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;food = [:milk, :bread, :butter]
expected = [:milk, :bread]
(food &amp;amp; expected).size &amp;gt; 0 # =&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ruby-doc.org/core/classes/Array.html#M002212&quot; title=&quot;Array#&amp;amp;&quot;&gt;&lt;code&gt;Array#&amp;amp;&lt;/code&gt;&lt;/a&gt; gets the intersection of two arrays (the values that are present in both) and returns a new array containing only those values. You could add this to any &lt;code&gt;Array&lt;/code&gt; instance by simply defining your own &lt;code&gt;include_any?&lt;/code&gt; method:&lt;/p&gt;

&lt;p&gt;``` ruby&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# myapp/lib/ext/array.rb
class Array
  def include_any? values
    (self &amp;amp; values).size &amp;gt; 0
  end

  def include_all? values
    (self &amp;amp; values).size == values.size
  end
end

[:milk, :bread, :butter].include_any?([:milk, :butter]) # =&amp;gt; true
[:milk, :bread, :butter].include_all?([:milk, :butter]) # =&amp;gt; false
[:milk, :bread, :butter].include_all?([:milk, :butter, :bread]) # =&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;I cheated and gave you an &lt;code&gt;include_all?&lt;/code&gt; method also, which just ensures that all of the expected values are present.&lt;/p&gt;

&lt;p&gt;I could've used &lt;a href=&quot;http://ruby-doc.org/core/classes/Enumerable.html#M003132&quot; title=&quot;Enumerable#any?&quot;&gt;&lt;code&gt;Enumerable#any?&lt;/code&gt;&lt;/a&gt; but then we'd have to use a block and still use &lt;a href=&quot;http://ruby-doc.org/core/classes/Array.html#M002203&quot; title=&quot;Array#include?&quot;&gt;&lt;code&gt;Array#include?&lt;/code&gt;&lt;/a&gt;. This way, we're golden.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What cool things have you done with ruby today?&lt;/strong&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Hooking instance methods in Ruby</title>
    <link href="http://rand9.com/blog/hooking-instance-methods-in-ruby"/>
    <updated>2010-09-18T16:00:18-06:00</updated>
    <id>http://rand9.com/blog/hooking-instance-methods-in-ruby</id>
    <content type="html">&lt;p&gt;Everyone and their dog is familiar with ActiveRecord-style callbacks, you know, the kind where you specify you want a particular method or proc to be run before or after a given event on your model. It helps you enforce the principles of code ownership while making it trivial to do the hardwiring, ensuring that code owned by the model is also managed by the model.&lt;/p&gt;

&lt;p&gt;I love this kind of programming and recently found that I needed some similar functionality in a particular class, one that wasn't tied to Active&lt;em&gt;[Insert your railtie here]&lt;/em&gt;. My case was different in that I knew that &lt;em&gt;any&lt;/em&gt; class inheriting from a particular base, which we'll call &lt;code&gt;HookBase&lt;/code&gt;, needed a hardwired hook for every method defined, functionality that needed to run for virtually every instance method call. The following example illustrates my need:&lt;/p&gt;

&lt;p&gt;``` ruby&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class HookBase
  def hardwired_hook
    # functionality every method needs
  end
end

class MyClass &amp;lt; HookBase
  def find_widget
    # needs setup/teardown help from HookBase
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;So, operating from the idea that every instance method extending classes implement should have default wrap-around behavior, I got to work. First off, you need to know that ruby has built-in lifecycle hooks on your classes, objects, and modules. Things like &lt;code&gt;included&lt;/code&gt; and &lt;code&gt;extended&lt;/code&gt; and &lt;code&gt;method_added&lt;/code&gt; help you hook in to your code to ensure that the appropriate things are happening on your classes, objects, and modules. So in my case, I needed to know when a method was added to &lt;code&gt;HookBase&lt;/code&gt; (or one of its children) so that I could appropriately tap into that code.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;method_added&lt;/code&gt; is where the meat of the solution lies. When a method is added, ruby fires the method_added call on the object (if any exists), passing it the name of the new method. Keep in mind that this happens &lt;em&gt;after&lt;/em&gt; the method has already been created, which is crucial to this solution. We'll next create a new name from the old name, prepended with some identifier (in this case we chose &quot;hide_&quot;).&lt;/p&gt;

&lt;p&gt;We'll need to check the private_instance_methods array for already defined method names to ensure we're not duplicating our effort (or clobbering someone elses), as well as checking our own array constant for methods we don't want to hook. Remember that method_added will be called on every method that is found for HookBase as well as children. I found that there were HookBase methods I had implemented that were supporting this behavior and didn't need to be hardwired, so I added this to my list of methods to ignore.&lt;/p&gt;

&lt;p&gt;If we've made it this far, go ahead and alias the old method to the new one, then privatize the new one. Now we can safely redefine the old method without destroying the code it contained. We also now know that no one (except self) can invoke the private method directly, they'll have to implicitly go through the HookBase first.&lt;/p&gt;

&lt;p&gt;Redefining the old method is as simple as using &lt;code&gt;define_method&lt;/code&gt; and calling our hardwired_hook method within, passing our &lt;code&gt;new_method&lt;/code&gt; (which is privatized), and the old method (for convenience), and any associated arguments and blocks.&lt;/p&gt;

&lt;p&gt;The final implementation looks something like this:&lt;/p&gt;

&lt;p&gt;``` ruby&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class HookBase
  class &amp;lt;&amp;lt; self
    NON_HOOK_METHODS = %w( hardwired_hook some_other_method )

    def method_added old
      new_method = :&quot;hide_#{old}&quot;
      return if (private_instance_methods &amp;amp; [old, new_method]).size &amp;gt; 0 or old =~ /^hide_/ or NON_HOOK_METHODS.include?(old.to_s)

      alias_method new_method, old
      private new_method

      define_method old do |*args, &amp;amp;block|
        hardwired_hook new_method.to_sym, old.to_sym, *args, &amp;amp;block
      end
    end
  end

private

  # Hardwired handler for all method calls
  def hardwired_hook new_method, old_method, args*, &amp;amp;block
    # perform any before actions
    puts 'doing stuff before method call...'

    # Invoke the privatized method
    __send__ new_method, *args, &amp;amp;block

    # perform any after actions
    puts 'doing stuff after the method call...'
  end
end

class MyClass &amp;lt; HookBase
  def find_widget
    puts 'finding widget...'
  end
end

MyClass.new.find_widget
# doing any before actions
# finding widget...
# doing any after actions
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;The great thing about this approach is you may not even care about hardwiring anything, but just want to provide hooking functionality. If that's the case, simply define a class method in HookBase to register a hook (such as &lt;code&gt;before&lt;/code&gt; or &lt;code&gt;after&lt;/code&gt;), optionally accepting an &lt;code&gt;:only&lt;/code&gt; or &lt;code&gt;:except&lt;/code&gt; list of methods. Internally store the blocks passed and invoke them in the &lt;code&gt;hardwired_hook&lt;/code&gt; method either before or after the method call.&lt;/p&gt;

&lt;p&gt;Let me know if you have any comments or different approaches. Happy hacking!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;: Forgot that method_added needs to be defined in &lt;code&gt;class &amp;lt;&amp;lt; self&lt;/code&gt; to work properly. Also updated to use the &lt;code&gt;Array#&amp;amp;&lt;/code&gt; intersection method I described in &lt;a href=&quot;http://rand9.com/blog/intersecting_arrays_in_ruby&quot;&gt;Intersecting arrays in ruby&lt;/a&gt; instead of using &lt;code&gt;Array#include?&lt;/code&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Paper Skater</title>
    <link href="http://rand9.com/blog/paper-skater"/>
    <updated>2010-07-01T10:39:26-06:00</updated>
    <id>http://rand9.com/blog/paper-skater</id>
    <content type="html">&lt;p&gt;How unbelievably sick is this video. I love this.&lt;/p&gt;

&lt;object width=&quot;731&quot; height=&quot;548&quot;&gt;&lt;param name=&quot;allowfullscreen&quot; value=&quot;true&quot; /&gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot; /&gt;&lt;param name=&quot;movie&quot; value=&quot;http://vimeo.com/moogaloop.swf?clip_id=8461831&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=0&amp;amp;show_portrait=0&amp;amp;color=ff0179&amp;amp;fullscreen=1&quot; /&gt;&lt;embed src=&quot;http://vimeo.com/moogaloop.swf?clip_id=8461831&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=0&amp;amp;show_portrait=0&amp;amp;color=ff0179&amp;amp;fullscreen=1&quot; type=&quot;application/x-shockwave-flash&quot; allowfullscreen=&quot;true&quot; allowscriptaccess=&quot;always&quot; width=&quot;731&quot; height=&quot;548&quot;&gt;&lt;/embed&gt;&lt;/object&gt;


&lt;p&gt;&lt;a href=&quot;http://vimeo.com/8461831&quot;&gt;Skateboardanimation&lt;/a&gt; from &lt;a href=&quot;http://vimeo.com/singer&quot;&gt;Tilles Singer&lt;/a&gt; on &lt;a href=&quot;http://vimeo.com&quot;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Variable-length Method Arguments in Ruby</title>
    <link href="http://rand9.com/blog/variable-length-method-arguments-in-ruby"/>
    <updated>2010-06-02T23:19:11-06:00</updated>
    <id>http://rand9.com/blog/variable-length-method-arguments-in-ruby</id>
    <content type="html">&lt;p&gt;In yesterday's post regarding the &lt;a href=&quot;http://rand9.com/blog/four_things_you_should_know_about_ruby_methods&quot; title=&quot;Four things you should know about ruby methods&quot;&gt;four things you should know about ruby methods&lt;/a&gt;, I covered some basics about ruby method definitions. For this post, I just wanted to go into a little more detail here with some of the things I left off the table that came to me later.&lt;/p&gt;

&lt;h3&gt;Variable-length arguments&lt;/h3&gt;

&lt;p&gt;Number three on our list of things you should know, we talked about &lt;strong&gt;variable-length arguments&lt;/strong&gt;, also known as &lt;strong&gt;the array-collected parameter&lt;/strong&gt;. At least, that's what I call it... sometimes. This cool feature allows you to pass any number of arguments to a ruby method and have all the unmapped parameters get collected into a single parameter which becomes an array of the values that were passed. Whew! That was a mouthful.&lt;/p&gt;

&lt;p&gt;``` ruby&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def log_all(*lines)
    lines.each{|line| @logger.info(line)}
end

log_all 'foo', 'bar', 'baz', 'qux'

# File: logs/your_log_file.log
# foo
# bar
# baz
# qux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;This is neat, no doubt, but what if you don't want to specify each value individually to the array-collected parameter in the method call? Say for instance, in the previous example, I already had the values &lt;code&gt;'foo'&lt;/code&gt;, &lt;code&gt;'bar'&lt;/code&gt;, &lt;code&gt;'baz'&lt;/code&gt;, and &lt;code&gt;'qux'&lt;/code&gt; in an array. Ruby allows you to pass the array through as a pre-collected array of values. The only thing to do is pass the array as a single parameter, prefixed by an asterisk (&lt;code&gt;*&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;``` ruby&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def log_all(*lines)
    lines.each{|line| @logger.info(line)}
end

# values are predefined
values = ['foo', 'bar', 'baz', 'qux']

# Don't forget the asterisk!
log_all *values
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;If you were to indeed forget the asterisk before the values array being passed, &lt;code&gt;log_all&lt;/code&gt;'s lines parameter would still be an array, but would only contain one element: the array you passed. So in order to get to it you'd either have to flatten &lt;code&gt;lines&lt;/code&gt; or call the &lt;code&gt;0th&lt;/code&gt; index on it, which sort of defeats the purpose.&lt;/p&gt;

&lt;h3&gt;Don't forget blocks, lambdas, and procs!&lt;/h3&gt;

&lt;p&gt;This array-collection technique to method parameter definition is not only confined to normal methods, but also to ruby's trio of anonymous function definitions: blocks, lambdas, and procs. Take the same example from above, with &lt;code&gt;log_all&lt;/code&gt; rewritten as a lambda.&lt;/p&gt;

&lt;p&gt;``` ruby&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;log_all = lambda do |*lines|
    lines.each{|line| @logger.info(line)}
end

# values are predefined
values = ['foo', 'bar', 'baz', 'qux']

# Don't forget the asterisk!
log_all.call *values
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;You can even do this with ActiveRecord &lt;a href=&quot;http://api.rubyonrails.org/classes/ActiveRecord/NamedScope/ClassMethods.html&quot; title=&quot;ActiveRecord named_scopes&quot;&gt;named_scopes&lt;/a&gt;, which is wicked cool.&lt;/p&gt;

&lt;p&gt;``` ruby&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class User &amp;amp;lt; ActiveRecord::Base
    named_scope :with_names_like, lambda do |*names|
        {
            :conditions =&amp;gt; names.collect{|name| &quot;lower(name) like '%?%'&quot;}.join(' OR ').to_a.push(names).flatten!
        }
    end
end

User.all.with_names_like 'jeff', 'jose', 'jill'
# Creates a condition sql string like so:
# WHERE (lower(name) like '%jeff%' OR lower(name) like '%jose%' OR lower(name) like '%jill%')
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;I'm interested to know what other ways you've come up with to use this technique. Please leave a comment below if you have any questions or examples of your own work.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Four things you should know about Ruby methods</title>
    <link href="http://rand9.com/blog/four-things-you-should-know-about-ruby-methods"/>
    <updated>2010-06-01T22:27:57-06:00</updated>
    <id>http://rand9.com/blog/four-things-you-should-know-about-ruby-methods</id>
    <content type="html">&lt;p&gt;Just wanted to jot down some of the really cool things I've learned aout the way you can call methods in ruby. I may end up expanding this post into four separate posts with more info if need be, but for now I'll try to keep this short.&lt;/p&gt;

&lt;h3&gt;1. Default values&lt;/h3&gt;

&lt;p&gt;When defining a method with parameters, inevitably you'll find that it can prove useful to have some of the params revert to a default value if no value is passed. Other languages like python and php give you similar conventions when providing the parameter list to a method.&lt;/p&gt;

&lt;p&gt;To use default values, simply use an equals sign after the parameter name, followed by the default parameter you wish to use. Note however, that while not all params need have a default value assigned, all params that &lt;em&gt;do&lt;/em&gt; have defaults must go at the end of the parameter list.&lt;/p&gt;

&lt;p&gt;``` ruby&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Invalid method definition. Either from_date must be at the end of the method list, or to_date must have a default value
def back_to_the_future(from_date=1985, to_date)
    puts &quot;From Date: #{from_date}&quot;
    puts &quot;To Date: #{to_date}&quot;
end

# Valid method definition
def back_to_the_future(from_date=1985, to_date=1955)
    puts &quot;From Date: #{from_date}&quot;
    puts &quot;To Date: #{to_date}&quot;
end

back_to_the_future
# =&amp;gt; 1985
# =&amp;gt; 1955

back_to_the_future 2010
# =&amp;gt; 2010
# =&amp;gt; 1955

back_to_the_future 2010, 2000
# =&amp;gt; 2010
# =&amp;gt; 2000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Pretty simple, but hey, maybe you didn't know.&lt;/p&gt;

&lt;h3&gt;2. &quot;Named Parameters&quot; using the special hash parameter&lt;/h3&gt;

&lt;p&gt;Python, Objective-C, and various other languages have an interesting syntax for method arguments where you can name an argument beyond the scope in which the method is defined. These named parameters give you the ability to assign values to method arguments in an arbitrary order, since you are assigning a value to a specific parameter by that parameters name.&lt;/p&gt;

&lt;p&gt;While ruby doesn't have Named Parameter syntax built in, there is one way to gain something very similar, and it has to do with Ruby Hashes. Ruby's hash syntax has a very simple, minimalist style that I really like, especially in Ruby 1.9. The interesting thing about using the hash parameter as a &quot;named parameter&quot; or &quot;variable-length&quot; argument, is that there is no syntactic sugar needed when defining the method. All the interesting work goes on while calling the method.&lt;/p&gt;

&lt;p&gt;``` ruby&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def back_to_the_future(options)
    puts &quot;From #{options[:from]} to #{options[:to]}&quot;
end

back_to_the_future :from =&amp;gt; 1985, :to =&amp;gt; 1955
# =&amp;gt; From 1985 to 1955

back_to_the_future :to =&amp;gt; 1985, :from =&amp;gt; 1955
# =&amp;gt; From 1955 to 1985

back_to_the_future :with_doc =&amp;gt; false
# =&amp;gt; From  to 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Notice here that we didn't have to include the open and close curly braces usually present in a hash definition. You can put them in if you'd like, but sometimes it's more confusing to see it that way (what with block syntax using curly braces or the &lt;code&gt;do...end&lt;/code&gt; syntax).&lt;/p&gt;

&lt;p&gt;You can still have regularly defined parameters with or without defaults in the parameter list, just make sure they come before the expected hash collection.&lt;/p&gt;

&lt;p&gt;``` ruby&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def back_to_the_future(from_date, to_date, options) ... end

def back_to_the_future(from_date, to_date=1955, options) ... end

def back_to_the_future(from_date, to_date=1955, options={}) ... end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;You've probably noticed by now that rails does this &lt;em&gt;all over the place&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;3. Variable-length arguments using the special array parameter&lt;/h3&gt;

&lt;p&gt;While named-parameters is nice for passing a list of configuration options to a method, sometimes you just want a method to accept any number of arguments, such as a logger method that can take any number of log messages and log them independent of each other. Ruby has another parameter condensing technique where all parameters passed that do not map to pre-defined arguments get collected into their own special array parameter, that is, if you ask for it. Defining a method in this way, you simply place a parameter at the end of the parameter list with an asterisk (&lt;code&gt;*&lt;/code&gt;) preceding the parameter name.&lt;/p&gt;

&lt;p&gt;``` ruby&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def back_to_the_future(from_date, to_date, *people)
    puts &quot;Who's coming?&quot;
    people.each {|person| puts person }
end

back_to_the_future 1985, 1955, 'Marty', 'Doc', 'Biff'
# =&amp;gt; Who's Coming?
# =&amp;gt; Marty
# =&amp;gt; Doc
# =&amp;gt; Biff
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Also worth noting is that the parameters collected do not need to be of one type like Java forces you to be. One could be a string, the next a number, the next a boolean. Whether or not that is a good design for your method is another story.&lt;/p&gt;

&lt;p&gt;This style of parameter definition can be mixed with all the styles we've discussed so far, just remember the order things go: Regular params, Regular params with defaults, a Hash-collected param (if any), and finally the Array-collected params (where the param is preceded with an asterisk).&lt;/p&gt;

&lt;p&gt;``` ruby&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def back_to_the_future(from_date, to_date=1955, delorean_options={}, *people)
    # ...
end
back_to_the_future 1985, :use_flux_capacitor =&amp;gt; true, :bring_back_george =&amp;gt; false, 'Marty', 'Doc'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h3&gt;4. Saving the best for last: Blocks!&lt;/h3&gt;

&lt;p&gt;Arguably the most powerful feature that Ruby boasts is the ability to send an anonymous function to a method to be executed by the method in whatever way it was designed. Ruby calls these anonymous code blocks just that, &lt;strong&gt;blocks&lt;/strong&gt;. In other contexts you might hear them called lambda's, procs, or simply anonymous function. You've probably already used blocks a ton in your ruby code, but what exactly are they for, and how can you use them in your own code?&lt;/p&gt;

&lt;p&gt;Virtually every class in ruby's core make use of blocks to basically extend the language's abilities without having to add more syntactic sugar. Take for instance iterating over an array, the conventional way with a for loop, and ruby's more idiomatic way, with the &lt;code&gt;each&lt;/code&gt; and it's associated block.&lt;/p&gt;

&lt;p&gt;``` ruby&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;people = ['Marty', 'Doc', 'Biff']
for person in people
    puts person
end

people.each do |person|
    puts person
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;The first example uses ruby's syntax sugar to run the loop, printing out each entry in the people array. The second calls the &lt;code&gt;each&lt;/code&gt; method on the people array, passing it a block. &lt;code&gt;Array#each&lt;/code&gt; can and likely will run it's own code before or after invoking the block. As a developer outside looking in, it doesn't really matter to me what &lt;code&gt;each&lt;/code&gt; does, so long a it calls my block for each element in the array. If we were to write a simplification of what ruby is doing in the background, it'd probably look something like this:&lt;/p&gt;

&lt;p&gt;``` ruby&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def each
    for e in self
        yield e
    end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;But wait a minute, isn't that what we wrote in our first example without the block? Indeed, it's very similar. Where our block example differs is that we have the ability to pass an anonymous block of code to the &lt;code&gt;each&lt;/code&gt; method. When &lt;code&gt;each&lt;/code&gt; is ready to call our block, it invokes yield, passing the argument applicable, in this case the &lt;code&gt;e&lt;/code&gt; variable. In other words, &lt;code&gt;each&lt;/code&gt; is handling the iteration for us, allowing us to focus on what matters more, the code being run for each iteration.&lt;/p&gt;

&lt;p&gt;Syntactically, the big things to jot down with defining your methods to accept blocks are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All methods implicitly may receive a block as an argument.&lt;/li&gt;
&lt;li&gt;If you want to name this argument, for whatever reason, it must be last in the argument list, and preceded by an ampersand &lt;code&gt;&amp;amp;amp;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Just as all methods implicitly may receive a block, you can always check in a given method if a block was given, by calling &lt;code&gt;block_given?&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;TO invoke a block, simply call the yield method, passing any paramters your block may be expecting&lt;/li&gt;
&lt;li&gt;Alternatively, if you have named the block, say &lt;code&gt;&amp;amp;func&lt;/code&gt;, treat it as a lambda or proc that is passed to you (because that's what &lt;em&gt;was&lt;/em&gt; passed), using the built-in &lt;code&gt;call&lt;/code&gt; method available to procs: &lt;code&gt;func.call(some_param)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;``` ruby&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def back_to_the_future(*people, &amp;amp;cool_block_name)
    puts &quot;We're going back to the future with...&quot;
    people.each do |person|
        cool_block_name.call(person)
    end
end

back_to_the_future 'Marty', 'Doc', 'Biff' do |person|
    puts person
end
# =&amp;gt; We're going back to the future with...
# =&amp;gt; Marty
# =&amp;gt; Doc
# =&amp;gt; Biff
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;All of these examples are obviously contrived, but I hope it sheds some light on some really cool things you can do in ruby with simple method definitions. I'll likely be doing more posts with blocks, procs, and lambda's in the future, since they are definitely the most powerful tools in the shed (as far as methods go), so look for those sometime in the near future.&lt;/p&gt;

&lt;p&gt;Please let me know if you find any omissions or errors in the above examples and explanations. Happy Coding!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Ruby Dailies</title>
    <link href="http://rand9.com/blog/ruby-dailies"/>
    <updated>2010-05-27T22:03:45-06:00</updated>
    <id>http://rand9.com/blog/ruby-dailies</id>
    <content type="html">&lt;p&gt;Back in January (a whopping 5 months ago!) I started at a new position for an up and coming startup company in Utah. I left my previous employer who had treated me extremely well, given me great opportunities to learn and grow, and ultimately put me in a great position to yet again catapult into even bigger and better things.&lt;/p&gt;

&lt;p&gt;One of the biggest draws for coming to the new company was the opportunity I was given to choose the language and platform for an entirely new product, one I'd be driving the development of while running my own team. The majority of the team was leaning towards Python, but during the interview process I made it quite clear that it was my goal to do the thing in Ruby. Previous to this opportunity, I'd done a lot of ruby on the side for clients and my own projects, but it hadn't quite cracked into the full-time gig. Here was my chance.&lt;/p&gt;

&lt;p&gt;It took a week or so to nail everyone down to the decision to move forward with Ruby and Sinatra, but it's been an awesome decision for us.  I honestly am so happy each day solving problems in the unbelievably friendly language that is Ruby. I've learned an enormous amount, and feel like I'm at the point where I can start sharing a lot of the ruby tidbits I come across each day. I'm going to call this article series the &lt;strong&gt;Ruby Dailies&lt;/strong&gt;, and the plan is to post a few articles a week showing off some neat things.&lt;/p&gt;

&lt;p&gt;Naturally, being a somewhat late newcomer to the ruby party, so much of what I have learned so far allows me to stand on the shoulders of (ruby) giants: Matz, _why, Ezra, Yehuda, DHH, Wanstrath, and tons of others. Obviously I'll give credit where credit is due when posting these tidbits. Stay tuned!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Bundler 0.9.1 with Capistrano</title>
    <link href="http://rand9.com/blog/bundler-0-9-1-with-capistrano"/>
    <updated>2010-02-05T08:27:13-07:00</updated>
    <id>http://rand9.com/blog/bundler-0-9-1-with-capistrano</id>
    <content type="html">&lt;p&gt;On my current project at work we're building a &lt;a href=&quot;http://sinatrarb.com&quot; title=&quot;Sinatra, the ruby micro-framework&quot;&gt;Sinatra&lt;/a&gt; app. More specifically, we used the &lt;a href=&quot;http://monkrb.com&quot; title=&quot;Monk the meta-glue framework built atop Sinatra&quot;&gt;Monk&lt;/a&gt; generator/glue meta-framework which is built atop Sinatra. When you generate a Monk app it automagically gives you a dependency/gem management system known as, fittingly, dependencies. This article isn't meant to knock dependencies (which I believe is written by the &lt;a href=&quot;http://citrusbyte.com&quot; title=&quot;CitrusByte development shop&quot;&gt;CitrusByte&lt;/a&gt; guys, the creators of monk), but through some continuing issues with it we decided to find something else to handle that problem. That something we found was Yehuda's &lt;a href=&quot;http://github.com/carlhuda/bundler&quot; title=&quot;Bundler gem management system&quot;&gt;Bundler&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Bundler is really cool because it allows you to make all your gem management across all your development, testing, and production systems easy to handle. You define a &lt;code&gt;Gemfile&lt;/code&gt; which references all the gems required to make your app go boom (in a good way). Once the file is defined simply run &lt;code&gt;bundle install&lt;/code&gt; to ensure your system has all the necessary dependencies to run your app.&lt;/p&gt;

&lt;p&gt;I created my bundler Gemfile 4 or 5 days ago, installed the dependencies, and then sort of left it alone for a while. Yesterday I wanted to deploy my app to production and so I went into my capistrano &lt;code&gt;deploy.rb&lt;/code&gt; to update my recipe to handle the bundler stuff. Naturally, I needed bundler on the server, so I went and installed the gem. Little did I realize that in those few days Yehuda and Carl had updated the gemspec to a new version for bundler, moving from 0.8.x to 0.9.1. When you install the 0.9.x version it asks you to remove any pre-0.9 installations of bundler. &lt;strong&gt;If you have an existing Bundler installation and want to upgrade, delete the old install &lt;em&gt;before&lt;/em&gt; you install the new.&lt;/strong&gt; Otherwise, your gem command will be broken. A lot of my headaches would have been alleviated had I just done that.&lt;/p&gt;

&lt;p&gt;I found a few blog posts and gists that have bundler specific tasks for cap recipes, so I forked and modified them for your benefit. In order to get the magic of bundler for your app, use the following in your cap recipe:&lt;/p&gt;

&lt;div&gt;&lt;script src='https://gist.github.com/295244.js?file='&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;# ...

namespace :bundler do
  task :create_symlink, :roles =&amp;gt; :app do
    shared_dir = File.join(shared_path, 'bundle')
    release_dir = File.join(current_release, '.bundle')
    run(&amp;quot;mkdir -p #{shared_dir} &amp;amp;&amp;amp; ln -s #{shared_dir} #{release_dir}&amp;quot;)
  end
  
  task :bundle_new_release, :roles =&amp;gt; :app do
    bundler.create_symlink
    run &amp;quot;cd #{release_path} &amp;amp;&amp;amp; bundle install --without test&amp;quot;
  end
  
  task :lock, :roles =&amp;gt; :app do
    run &amp;quot;cd #{current_release} &amp;amp;&amp;amp; bundle lock;&amp;quot;
  end
  
  task :unlock, :roles =&amp;gt; :app do
    run &amp;quot;cd #{current_release} &amp;amp;&amp;amp; bundle unlock;&amp;quot;
  end
end

# HOOKS
after &amp;quot;deploy:update_code&amp;quot; do
  bundler.bundle_new_release
  # ...
end
&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;


&lt;p&gt;Two points to notice:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We setup a hook to run after the deploy:update_code task which will run the bundle install command to get any bundle updates. Bundler 0.9.1 comes with a nifty feature where you can lock your gem versions so that any calls to bundle install won't actually update anything.&lt;/li&gt;
&lt;li&gt;We're also symlinking the .bundle directory that bundler creates for us into the shared folder. This is just a nicety so that bundler doesn't have to recreate that directory and it's environment.rb file everytime you release your code.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;I hope this helps anyone out there who has upgraded their bundler versions. Happy bundling with capistrano. :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Are you a problem solver or a tool?</title>
    <link href="http://rand9.com/blog/are-you-a-problem-solver-or-a-tool"/>
    <updated>2009-11-12T23:07:38-07:00</updated>
    <id>http://rand9.com/blog/are-you-a-problem-solver-or-a-tool</id>
    <content type="html">&lt;p&gt;I'm at a point in my career as a Software Developer where I feel like things are opening up quite a bit for me. I'm not talking about getting a new job or something, I just mean that I think I'm finally understanding Software Development for what it is. I've been writing software since the beginning of 2003, so I guess I'm a little late coming to the game in this understanding? Oh well, it's not the destination, it's the journey, right? Right.&lt;/p&gt;

&lt;h3&gt;The Journey&lt;/h3&gt;

&lt;p&gt;My journey began as a craftsman. I got lucky because I learned how to program from a friend I worked with who was just helping me in his little spare time at work. My knowledge of PHP scripting started out super small, but I took rather well to it and essentially launched into a career when I had no idea I wanted one.&lt;/p&gt;

&lt;p&gt;Through the following months and years I gained an incredible amount of knowledge by simply working with really bright people. It just seemed that each new job I got I came in contact with someone who helped me in a different way than before:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;From Nathan, I learned the very basics of programming: control flow, variables, functions, mysql, etc.&lt;/li&gt;
&lt;li&gt;From Rainer I learned a ton about OO programming and CSS-based designs, as well as semantic markup that validates and conforms to standards. He also taught me to love the complex Join Query, and love it I do.&lt;/li&gt;
&lt;li&gt;Ben showed me a new way to use objects I hadn't really seen before (closer to framework programming), and also got me a job at a great little startup where we were given a great opportunity to run the show. At that company, I gained absolutely invaluable experience managing, developing, and deploying large applications. We even got the chance to write our own web framework, which was a huge learning experience.&lt;/li&gt;
&lt;li&gt;Ryan showed me what it takes to really get things done. He's also a fine purveyor of knives and guns (which, admittedly has nothing to do with this post at all, it's just cool).&lt;/li&gt;
&lt;li&gt;From Eric and Kevin I gained the opportunity to take all my knowledge and apply it with a different toolset. I also learned a lot more about enterprise-level systems.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;All of these people and experiences has made me the developer I am today. I believe that whatever the road you take, eventually you come to be a developer who &lt;strong&gt;solves problems&lt;/strong&gt;, which is really what software development is all about.&lt;/p&gt;

&lt;h3&gt;The Destination&lt;/h3&gt;

&lt;p&gt;So what is the relationship between solving problems and the programming languages or frameworks we use to do so? It's quite simple:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Languages are tools, and we use tools to solve problems.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Much the same way a carpenter uses a hammer to put in a nail and a screwdriver to put in a screw, developers &lt;strong&gt;&lt;em&gt;should&lt;/em&gt;&lt;/strong&gt; choose their tools based on the problem at hand, not based on programming ideology. Just because you know Java considerably well doesn't mean that Java should be used in all situations, like website scraping. Ruby or Perl would be much better suited to handle the retrieval and parsing of webpages, due to the better Regular Expression integration.&lt;/p&gt;

&lt;p&gt;Scraping websites is just one example of a trillion different scenarios. I've run into this quite a bit lately, where a developer choose a language or framework due to ideology, and it's been driving me crazy. Use the right tool for the job, and move on with it. My career and more importantly my &lt;em&gt;abilities&lt;/em&gt; are not defined by the tools I use, but by my ability to solve the problem. Just as a carpenter is not defined in skill by whether he uses Dewalt or Craftsman, but by the experience he's had building staircases or handcrafting beautiful pieces of furniture.&lt;/p&gt;

&lt;p&gt;So, as a rule of thumb, write this down:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Your usefulness is defined by your experiences and ability to solve problems, not necessarily by the tools you use along the way.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This will always make you better when you apply this knowledge. Pick the right tool for the job, and ignore the detractors who say that Java is better than Ruby because it has compile-time checking and IDE support.&lt;/p&gt;

&lt;h3&gt;What good are tools then?&lt;/h3&gt;

&lt;p&gt;I'm glad you asked. Tools are simply meant to increase productivity and ease manual labor. Simple machines like the lever and pulley were undoubtedly created to alleviate the difficulties of certain types of manual labor, like raising heavy objects up to a higher plane. In other words, some caveman decided to solve a problem in a more convenient way: push the rock up the hill rather than try to heave it up a cliff.&lt;/p&gt;

&lt;p&gt;In a similar vein, programming languages and frameworks are created to solve specific problems, which in turn makes them great tools for getting things done. There are thousands of languages out there to use, each of them created to solve a specific need that the creator couldn't solve effectively with other tools. They found the need, so they created the tool, and now we all can use the tool to solve the given problem again and again.&lt;/p&gt;

&lt;p&gt;So please don't confuse yourself into thinking that the tools you use are what makes you great. The tools you use today will be outdated in five years or less, guaranteed. Your &lt;em&gt;ability&lt;/em&gt; to solve problems with the proper tool is what makes you great.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Fighting the Cubicle Uprising</title>
    <link href="http://rand9.com/blog/fighting-the-cubicle-uprising"/>
    <updated>2009-10-19T23:26:10-06:00</updated>
    <id>http://rand9.com/blog/fighting-the-cubicle-uprising</id>
    <content type="html">&lt;p&gt;Mind you, that's &lt;em&gt;cubicle&lt;/em&gt;, not &lt;em&gt;&lt;a href=&quot;http://www.joeydevilla.com/2009/05/03/cubical-vs-cubicle/&quot;&gt;cubical&lt;/a&gt;&lt;/em&gt;, just so we're all clear.&lt;/p&gt;

&lt;p&gt;Technically speaking, the cubicle uprising occurred probably somewhere in the late 70's (don't check my sources on that though). I'm not talking about when cubicle's gained souls and thrust their way from poverty into national prominence, that technically hasn't happened yet.&lt;/p&gt;

&lt;p&gt;I'm talking about the time when Corporate America was born and decided that it was cheaper to put people in boxes to cloud their thinking and judgement. So it's probably a futile attempt to overthrow the archetypal mind-prison for &lt;em&gt;everybody&lt;/em&gt;. That's why I'm just fighting my own fight. You can come too, if you want.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rand9.com/static/images/cubicle.jpg&quot; alt=&quot;Ahh, the cube farm&quot; /&gt;&lt;br/&gt;
I can see the violence inherent in the system! Can't you?&lt;/p&gt;

&lt;p&gt;Today at work we had a discussion about how many more programmers we could fit into the programmers office. Our office is a 25'x20' rectangle. We currently have 5 programmers working in this office, but we've had 6 before. My thought is that we could get 2 more than our old max, pushing us to 8. Now, that means we could have 8 programmers in our room &lt;em&gt;comfortably&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Oh, and none of us are in cubicles... &lt;em&gt;yet&lt;/em&gt;. I intend to keep it that way.&lt;/p&gt;

&lt;h3&gt;Fight back you coward!&lt;/h3&gt;

&lt;p&gt;When I was hired on, we had these kind of faux-wood heavy desks with hutches. Technically we still have some of those, a few of our guys are still in them. Ben and I got snooty though and decided to buy our own from &lt;a href=&quot;http://www.ikea.com/us/en/catalog/products/S49852135&quot; title=&quot;This base, with some other top&quot;&gt;IKEA&lt;/a&gt;. It was the best idea, still love that we did it. The company even paid us back for them, which was even cooler.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rand9.com/static/images/feng-shui-office.jpg&quot; alt=&quot;You are so jealous&quot; /&gt;&lt;br/&gt;
No, the back of his desk is not an appealing view. Hence the need for diffuse lighting.&lt;/p&gt;

&lt;p&gt;The reason I was snooty and wanted a fancy desk is two-fold: 1) I didn't really like the big desk with the hutch and stuff, it was WAY more desk than I needed; 2) I'd like to think that the cleaner lines of the IKEA desk are simply more pleasing to my design-centric eye, so I just enjoy being at my desk that much more. And why shouldn't I? On average we spend roughly two-thousand hours sitting at our work desk each year. Why not have it be a cool desk you like, with a glow lamp in the corner and a cool green bamboo plant growing nearby. Feng-shui baby.&lt;/p&gt;

&lt;p&gt;Back to the story, the one I was telling before my snooty tangent, the one about the programming room. The other strategy was to get as many programmers (i.e. cubicles) into the room as we could. Scratch that, apparently they are called Work Spaces now. Bah! And a &lt;a href=&quot;http://www.edmunds.com/media/reviews/top10/05.cars.worst.residual.value/05.ford.focus.500.jpg&quot; title=&quot;Ford Focus&quot;&gt;Ford Focus&lt;/a&gt; is an &lt;a href=&quot;http://cache.jalopnik.com/cars/assets/resources/2008/01/G-Power%20Hurricane%20BMW%20M5.jpg&quot; title=&quot;BMW M5. Oh the salivation...&quot;&gt;M5&lt;/a&gt;. You might as well sprinkle sugar on a turd and call it delicious. It ain't adding up. Calling it one thing doesn't make it something other than what it is. Call the pot black. It's a cubicle: a box constructed of cheap material for managers and investors to save some coin at the expense of employees hating their environment every day. &quot;But it only has 3 sides, it can't be a cubicle!&quot;, you stammer. Believe me my friend, it's just a cubicle. The same awful open-box with closed-thinking built right in!&lt;/p&gt;

&lt;p&gt;The programmers were luke warm to the cubicle idea, but it scared the crap out of me. I thought my cube days were over, solitary confinement in the gray dungeon a thing of the past. So I spoke up, and denounced that my days of cube-sitting were gone with the days of Tech Deck skating and &quot;¿Gracias por llamar a &lt;a href=&quot;http://www.tni.com&quot; title=&quot;Morinda Citrofolia, brought to you by Tahitian Noni International! Ya, I hate it too, it's okay.&quot;&gt;Morinda&lt;/a&gt;, como le puedo ayudarle?&quot;.&lt;/p&gt;

&lt;p&gt;My assertion was enough to sway the powers-that-be, so let us pray that if/when we hire those additional code monkeys we'll be getting them some nice IKEA desks instead of the beige-cage.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What have you stood up for today?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Apparently Robert Propst, the designer of the &lt;a href=&quot;http://www.hermanmiller.com/Products/Action-Office-System&quot; title=&quot;The current Action Office workspace design&quot;&gt;Action Office&lt;/a&gt; (what the cubicle originated from), called the cubicle a &lt;a href=&quot;http://en.wikipedia.org/wiki/Action_Office&quot; title=&quot;And I completely agree&quot;&gt;&quot;monolithic insanity&quot;&lt;/a&gt;. I couldn't agree more.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>My Git Workflow</title>
    <link href="http://rand9.com/blog/my-git-workflow"/>
    <updated>2009-10-15T21:59:19-06:00</updated>
    <id>http://rand9.com/blog/my-git-workflow</id>
    <content type="html">&lt;p&gt;Recently at work we've taken a giant leap forward in our software stack: We ditched CVS and are riding the &lt;a href=&quot;http://gitscm.org&quot;&gt;git&lt;/a&gt; bandwagon.&lt;/p&gt;

&lt;p&gt;And oh what a pretty red wagon it is. Drawn by the big Clydesdales with fancy harnesses. In this article I aim to show the workflow I've been using that I feel will help other people just getting in to git.&lt;/p&gt;

&lt;h3&gt;What's this &quot;git&quot; you speak of?&lt;/h3&gt;

&lt;p&gt;Just a small caveat: if you already know what git is, or if you don't care about how I got into git, &lt;a href=&quot;#workflow&quot;&gt;skip ahead&lt;/a&gt;. Sometimes I'm boring and I can't help it.&lt;/p&gt;

&lt;p&gt;Git's been coming along nicely for the last few years gaining all sorts of popularity in the face of Subversion's apparent lead, and CVS's mind-boggling IE6-like stranglehold on the Version Control Systems universe. A lot of the current fervor attributed to git is attributed to several popular open source projects changing their SCM from Subversion to Git, most notably (for me at least) &lt;a href=&quot;http://rubyonrails.org&quot; title=&quot;Ruby on Rails&quot;&gt;Ruby on Rails&lt;/a&gt; and their switch to &lt;a href=&quot;http://www.github.com/rails/rails&quot; title=&quot;Rails on Github&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I'll admit that I had no idea who or what git was until mid-2008 when a co-worker of mine told me he wanted to get into it (no pun intended). I was in my nice cozy comfortable Subversion shell at the time and thought how could one possible want anything more than SVN? Ironically, after using git for the past year or so, I'm thinking the same thing from the git perspective. &lt;em&gt;How in the world&lt;/em&gt; are people still using SVN (assuming they have the choice)? Ya, I don't know either.&lt;/p&gt;

&lt;p&gt;Due to much of git's current popularity coming from the Rails switch, a lot of the git info you read online comes from people doing stuff in &lt;a href=&quot;http://ruby-lang.org&quot; title=&quot;Ruby the programming language&quot;&gt;Ruby&lt;/a&gt;. This was certainly my main usage of git after I finally took the plunge late last year, using it to manage the version control of all my Rails/Sinatra projects. Of course, with any VCS, the content you are versioning need not be a specific software project at all. You could use it to version your photoshop design files if you wanted to.&lt;/p&gt;

&lt;h3&gt;How sweet it is to be loved by git&lt;/h3&gt;

&lt;p&gt;Anyways, at work we use Java. And up until about a month ago, we were using CVS to manage our software versioning. We've been doing a great round of tech discussions to improve our stack, and the CVS to Git migration was one of the first targets we moved against, due to the relatively simple nature of the change. I've got to credit &lt;a href=&quot;http://benmatz.wordpress.com&quot; title=&quot;Ben&quot;&gt;Ben&lt;/a&gt; for randomly deciding to demo git to everybody in one meeting. I just let him run with it, though I probably know git a lot better. By the end of the meeting we were all like, &quot;Okay, so when do we start using it?&quot;. I was floored. I thought for sure there'd be reservations and assumed that if we ever did get off of CVS it'd be to Subversion. Well, just a few short weeks later we had imported our entire repo into Git (approximately 900 mb). A few weeks after that, we were completely dependent on git for our VCS of choice. And boy does it feel sweet.&lt;/p&gt;

&lt;p&gt;Not a day goes by when &lt;em&gt;someone&lt;/em&gt; in dev just randomly exclaims, &quot;How freaking sweet is Git?!&quot;, or, &quot;Git is just so fast!&quot;. I love hearing this stuff, cause it reinforces my belief that git really is a superior VCS. It brings some passion back into what we do each day. A software developer's tools should always enhance their ability to put out great software. Git does just that.&lt;/p&gt;

&lt;p&gt;Okay, so that was the boring back story, here's some of the meat of git that we've been working with. Most of these concepts were taken in one form or another from the &lt;a href=&quot;http://www.kernel.org/pub/software/scm/git-core/docs/gitworkflows.html&quot; title=&quot;Git workflow suggestions&quot;&gt;Git Workflow manpage&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;workflow&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Topic Branches&lt;/h3&gt;

&lt;p&gt;The best thing I pulled from the git workflow article is the concept of the &lt;strong&gt;topic branch&lt;/strong&gt;. In git, branching doesn't create new filesystem directories, it just magically handles it all in the cloned repository. This was a huge upgrade from CVS and even Subversion in my opinion. It's one of the biggest reasons I love git so much. Branching is cheap, therefore much more useful.&lt;/p&gt;

&lt;p&gt;Topic branches aren't a special kind of branch, it's just a way of thinking about how to use branches for effective project development. Git creates a default branch for your trunk or mainline of development and calls it &quot;master&quot;. Each time the project manager assigns me a project (in this case say the project is called &quot;widget&quot;), I follow this workflow:&lt;/p&gt;

&lt;div&gt;&lt;script src='https://gist.github.com/211594.js?file='&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;# This is a simple descriptor on how I do topic development using git
# Some of the commands are java flavored (like ant),
# but that doesn't mean you can't use this with other languages.

# Step 1 - Synchronize master.
# 1.1 - Checkout master branch
# 1.2 - Get changes from origin
git checkout master
git pull

# Step 2 - Create a new branch to do all widget development.
git co -b widget

# Step 3 (recursive) - Write tests, write code, and commit.
# For every user story in the project, follow this flow:
# 1.1 - Write tests
# 1.2 - Write code to pass the tests
# 1.3 - When the story is completed and the tests pass, commit the code.
# Lather, rinse, repeat until code complete on the project
git add .
git commit -m &amp;quot;Some message about your commit&amp;quot;

# Step 4 - Synchronize master
# 4.1 - Fix any conflicts and commit
git checkout master
git pull
# Do 4.1 if you need to

# Step 5 - Merge the topic branch into master
# 5.1 - Fix any conflicts and commit
git merge widget
# Do 5.1 if you need to

# Step 6 - Fix conflicts, run compiles, run tests
# If tests or compilation fail, go back to step 3
ant compile
ant test # or whatever testing procedure you use

# Step 7 - Push code to origin
# Only perform this step once you have resolved
# all conflicts and all automated tests pass
git push origin master

# Step 8 - Remove your topic branch when topic development has ceased
git branch -d widget&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;How do you manage your projects with git?&lt;/strong&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Techno Hurdles and Writers Block</title>
    <link href="http://rand9.com/blog/techno-hurdles-and-writers-block"/>
    <updated>2009-10-14T11:42:18-06:00</updated>
    <id>http://rand9.com/blog/techno-hurdles-and-writers-block</id>
    <content type="html">&lt;p&gt;You've patiently awaited results (don't deny it) from my &lt;a href=&quot;http://rand9.com/blog/learning_how_to_focus&quot; title=&quot;Learning how to focus&quot;&gt;previous post&lt;/a&gt;, and indeed I've been planning on it. Sometimes plans don't work out how we expect them to. And sometimes they do. Here is part 2 of &lt;a href=&quot;http://rand9.com/blog/learning_how_to_focus&quot; title=&quot;Learning how to focus&quot;&gt;&lt;strong&gt;Learning how to focus&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Approximately 6 weeks ago I &lt;a href=&quot;http://rand9.com/blog/learning_how_to_focus&quot; title=&quot;Learning how to focus&quot;&gt;deleted my Twitter and Facebook accounts&lt;/a&gt;. It was an impulsive move. An idea came to me, I talked to my wife about it, we agreed, and I just did it. There wasn't a lot of drama involved, I had just gotten to the point where I felt I was losing valuable time using those services. I'm not going to go into more of the &quot;why&quot; details, I already &lt;a href=&quot;http://rand9.com/blog/learning_how_to_focus&quot; title=&quot;Learning how to focus&quot;&gt;did that&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;The positive stuff&lt;/h2&gt;

&lt;p&gt;Since purging the web-social scene from my daily life, I've noticed a lot of positive gains. For one, I'm a &lt;em&gt;lot&lt;/em&gt; more focused while at work. We're talking orders-of-magnitude more focused. Before it was easy to spend a lot of time posting stuff on Twitter or reading people's Facebook updates. Now, those distractions are not just archived, they're completely gone.&lt;/p&gt;

&lt;p&gt;Since &quot;the purge&quot; I've hit all my project deadlines at work, something that is actually fairly difficult for a developer to do in a &lt;a href=&quot;http://en.wikipedia.org/wiki/Waterfall_development&quot; title=&quot;Waterfall Development Model&quot;&gt;serial environment&lt;/a&gt;. Well, I hate sweeping generalizations; &lt;strong&gt;&lt;em&gt;I&lt;/em&gt;&lt;/strong&gt; have a hard time hitting deadlines in a serial environment, though I'm not alone, just go read some &lt;a href=&quot;http://martinfowler.com/articles.html#id22657&quot; title=&quot;Fowler Articles on Agile Programming&quot;&gt;Fowler&lt;/a&gt; essays on Agile Programming.&lt;/p&gt;

&lt;p&gt;Speaking of Fowler, I've totally come to love the essays he writes about &lt;a href=&quot;http://martinfowler.com/articles/designDead.html&quot; title=&quot;Fowler: Is Design Dead?&quot;&gt;software design&lt;/a&gt;, &lt;a href=&quot;http://martinfowler.com/articles.html#id22657&quot; title=&quot;Fowler Articles on Agile Programming&quot;&gt;agile programming&lt;/a&gt;, test-driven development, etc. He's just a genius, and a great writer. If you write code, you should read Fowler. I never would have had time to read any of his stuff had it not been for &quot;the purge&quot;. As a side note, I'm using &lt;a href=&quot;http://www.marco.org/about&quot; title=&quot;Marco Arment&quot;&gt;Marco's&lt;/a&gt; &lt;a href=&quot;http://instapaper.com&quot; title=&quot;Instapaper iPhone App&quot;&gt;Instapaper&lt;/a&gt; iPhone app on any article I'd like to read, but want to &quot;read later&quot;. It's my number one app. Go &lt;a href=&quot;http://itunes.apple.com/WebObjects/MZStore.woa/wa/viewSoftware?id=288545208&amp;amp;mt=8&quot; title=&quot;Instapaper on the App Store&quot;&gt;buy it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One facet of the purge was removing a lot of RSS feeds from my daily intake. I kept around 40 or so, though most have a post frequency of less than 1 per week, so I rarely have more than 3 or 4 articles at a time in reader. This is really nice because I still can get some info I want, but my take has been that it's completely non-pressuring me. I don't feel the desire to constantly check, because I know that there probably isn't anything there. There are stretches of days where I don't even check it because it's completely off my mind. This is &lt;em&gt;exactly&lt;/em&gt; the kind of thing I was going for.&lt;/p&gt;

&lt;h2&gt;The weird stuff&lt;/h2&gt;

&lt;p&gt;There have definitely been some weird side-effects to the purge. For example, when I read an interesting blog post or listen to a cool song, or whatever, I &lt;em&gt;still&lt;/em&gt; (to this day) think about posting it to Twitter/Facebook. I mean, that's how addicted I was. It's kind of like my withdrawal cravings I guess. Still, very weird.&lt;/p&gt;

&lt;p&gt;Something else weird happened: I turned into an old man. Over the past few weeks, my average bed time has gotten earlier than before. I'm now going to bed between 10 and 11, sometimes even earlier. Just a few days ago I literally fell asleep at 8:30 pm. I'm crazy like that.&lt;/p&gt;

&lt;h2&gt;The &quot;huh?&quot; stuff&lt;/h2&gt;

&lt;p&gt;You may have noticed that I haven't posted a ding-dang thing since I wrote about the purge. Along with the purge came a huge case of writers block. I mean, we're talking mammoth. I have had a continual desire to &lt;em&gt;want&lt;/em&gt; to blog and write stuff that is random and annoying, but I just haven't gotten to the point of writing it. It's really weird, possibly coincidental to the time period. If you followed this blog before when it was on wordpress, you'll know that I had gotten less frequent in those postings too, so maybe it's a deeper issue. I do love how Marco talks about &lt;a href=&quot;http://www.marco.org/93193436&quot; title=&quot;marco.org: Avoiding the Blogger trap&quot;&gt;not caring&lt;/a&gt; about the frequency of posts on his blog, that he blogs &lt;a href=&quot;http://articles.marco.org/261&quot; title=&quot;marco.org: Do your own thing&quot;&gt;whatever and whenever&lt;/a&gt; he wants to. This is totally the style of blog I want to cultivate. I've just not really had the drive to post at all lately. And it's bugging me.&lt;/p&gt;

&lt;p&gt;Sure, this post is a new post on the blog. So I guess it's good that I'm getting some of it out there. I just want a bit more consistency. Not like, &quot;I must blog every 2 days&quot; or something stupid, just... you know, semi-regular updates. When I get an idea about a post, I want to just write it and post it. So that's something I'm working on.&lt;/p&gt;

&lt;p&gt;Probably the biggest frustration that I've hit is the lack of motivation to work on my entrepreneurial pursuits. I have literally done nothing towards furthering my goal of being an independent business owner. Usually I reserved evenings or saturday's for times when I could push forward on my ideas, and I've just completely fallen out of that routine. This is probably the biggest head-scratcher of the whole purge process. It was when I was &quot;addicted&quot; to the consumption of information that I was passionate about working on my ideas. Now that the addiction is gone... so is the passion. I'm not entirely convinced the two are related, so I'm still working through a lot of that in my head. Crap... that makes me sound like a manic-depressive psychopath. Just know that I'm not. I promise.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are some gains or shortfalls you've seen in me since the purge? What about yourself?&lt;/strong&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Learning how to focus</title>
    <link href="http://rand9.com/blog/learning-how-to-focus"/>
    <updated>2009-08-26T21:24:07-06:00</updated>
    <id>http://rand9.com/blog/learning-how-to-focus</id>
    <content type="html">&lt;p&gt;There's an interesting saying that is a golden proverb, one that has descended the ages:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;[...] and yet the true creator is necessity, who is the mother of our invention.&lt;br/&gt;
&amp;#151; Plato, &lt;a href=&quot;http://classics.mit.edu/Plato/republic.3.ii.html&quot; title=&quot;Plato's Republic&quot;&gt;The Republic&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It's been adapted over the years to read simply: &quot;Necessity is the mother of invention&quot;. If you're unfamiliar with the phrase, or don't quite remember what it means, I'll give you my interpretation. It means that invention (or ingenuity) is spawned from a direct need or necessity. Ideas and Machines and Businesses are all created because of an attributable need of some force, be it human or otherwise.&lt;/p&gt;

&lt;h3&gt;Washing Machines &amp;amp; Microsoft&lt;/h3&gt;

&lt;p&gt;A few months ago I had a weird thought pop into my head when I heard that phrase during the day. I thought, &quot;Sure, in most cases necessity &lt;em&gt;is&lt;/em&gt; the mother of invention, or the cause of why the invention was created. But if you reversed the phrase, would it also be true? &lt;strong&gt;Could Invention be the mother of Necessity?&lt;/strong&gt;&quot; At first you may dismiss this as a mere play on words and give it no further thought. But go back and read it again:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Invention is the mother of necessity.&lt;br/&gt;
&amp;#151; My weird brain&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Could it be, that a real need or necessity created these ideas and inventions and businesses, and once the ideas and inventions and businesses were created, they created and psychologically enforced a &quot;need&quot; to use them. Take for example the washing machine&lt;sup&gt;&lt;a href=&quot;#note1&quot; title=&quot;Note 1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. It was &lt;em&gt;invented&lt;/em&gt; because a real need existed. People doing their washing all over the world had to do it by hand, which was slow and hard and probably boring. What if someone created a turning basin that would make sure all the clothes were scrubbed together without having to do it manually? Of course, I'm sure the washing machine wasn't met with immediate overnight success like MySpace or something. Customers were probably sparse at first, but surely as you're reading this post right now, the washing machine grew in popularity and ubiquity because it fulfilled an enormous need.&lt;/p&gt;

&lt;p&gt;And here we are &lt;a href=&quot;http://en.wikipedia.org/wiki/Washing_machine#Washing_machine_milestones&quot; title=&quot;318 years after the first washing machine patent&quot;&gt;318 years&lt;/a&gt; after the first washing machine patent was issued. And &lt;em&gt;everyone&lt;/em&gt; has got a freaking washing machine. Ok, I know the kids in Africa don't, and college students and other poor people, but still, it's a big market by even Microsoft's standards. But let's get back to my thought. I'll agree whole-heartedly that the washing machine was invented because of a real need. But now, because we have the washing machine we kind of have to use it, don't we? I'm not entirely convinced either, but it's a weird loop to get into if you've got some time to kill.&lt;/p&gt;

&lt;h3&gt;Bit by Bit&lt;/h3&gt;

&lt;p&gt;And so we jump from washing machines to one of the most incredible and unbelievable inventions ever created: the Computer Processor (see &lt;sup&gt;&lt;a href=&quot;#note1&quot; title=&quot;Note 1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;). From ENIAC to iPhone, the computer processor has absolutely transformed the world culture more completely than perhaps any other invention has ever done, certainly faster than any other. This pace of evolution was quickened significantly by the arrival of the internet nigh-on twenty years ago (thanks, Mr. Gore).&lt;/p&gt;

&lt;p&gt;Entrepreneur's have flocked by the millions to the internet in hopes of cultivating some small corner for their prospective ideas. In this case, the invention of the internet has created a vacuum so strong that for the last 20 years the world has been frantically scrambling to catch up to the opportunities that multiply exponentially each day. As with every free market, there are giants and there are peasants. The internet giants are the household names: Google, Wikipedia, Digg, Craigslist, Facebook, Twitter, etc. They're so widespread that my grandma probably knows Google, Facebook and Wikipedia, even if she's not sure what they are or how you would use them. Anyone with a lick of sense can tell you that the ones who are making internet Empires are building them on top of some form of content aggregation. In the design, marketing, and advertising industries, the saying goes that &lt;strong&gt;Content is King&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The problem with having all of this information being so readily available is that it creates the need to process it. The necessity of finding and consuming information exists due to ease of acquiring it. Okay, let me back up a bit... the problem &lt;strong&gt;&lt;em&gt;I&lt;/em&gt;&lt;/strong&gt; have with the internet is &lt;strong&gt;&lt;em&gt;my&lt;/em&gt;&lt;/strong&gt; need to process as much information as possible. Programming, Business, Design, Comics, Photos, Friend Updates; all these things cry out for attention, and often I oblige. Much too often.&lt;/p&gt;

&lt;h3&gt;Why, _why?&lt;/h3&gt;

&lt;p&gt;On August 19th, 2009, one of the biggest names in the Ruby industry &lt;a href=&quot;http://news.ycombinator.com/item?id=773106&quot; title=&quot;The disappearance of _why&quot;&gt;disappeared&lt;/a&gt; entirely and completely from the internet. &lt;a href=&quot;http://en.wikipedia.org/wiki/Why_the_lucky_stiff#cite_note-whymirror-3&quot; title=&quot;_why's Wikipedia entry&quot;&gt;Why the lucky stiff&lt;/a&gt; (who often goes simply by &quot;why&quot; or &quot;_why&quot;) trashed all his sites, github projects, and any other notable web presence completely. At first people were afraid he had been hacked big time, or feared that he had been physically hurt or even killed. All of this was a bit overkill if you ask me. The final few days on his twitter account he continually posted rhetorical questions about the purpose of life and programming. _why didn't get shot or hacked, he got sick of information overload. He got tired of having to be defined by what the masses thought of him, so he bailed.&lt;/p&gt;

&lt;p&gt;I was &lt;em&gt;surprised&lt;/em&gt; because you just don't see that kind of thing happening to high-profile people online (unless they really did get hacked). I was &lt;em&gt;sad&lt;/em&gt; because he's contributed in some ways to my love for the Ruby programming language (his TryRuby site was key to that), such that I feel like the Ruby community did take a substantial loss. I was &lt;em&gt;intrigued&lt;/em&gt; because of the sheer style in which he went out. He knew what he was doing, probably had been planning it for a few months now, possibly even years. He hit a wall. A wall where the invention created a necessity he felt he could no longer support.&lt;/p&gt;

&lt;h3&gt;Operation &quot;_why not&quot;?&lt;/h3&gt;

&lt;p&gt;Since the day _why went offline (7 days ago) I've been formulating a bit of my own escape plan. Last night, I launched the first (and possibly only) phase. Time will tell if there are additional phases. You may have already noticed some of the effects of my actions. The first is that you will notice that my recent tweets no longer show at the bottom of this site. Yes, &lt;strong&gt;I deleted my Twitter account&lt;/strong&gt;. Not only mine (@localshred), but OSG's as well (@onesimplegoal). Go ahead, go check, I'll wait. Right, are you back? Okay, good. &lt;strong&gt;I also deleted my facebook account&lt;/strong&gt;. Not deactivated, I actually found the link to completely delete the account. It's supposed to be deleted in about 13 days, though I'm supposedly able to cancel the request at any time before it happens. I won't be. The third strike was drastically truncating the majority of my RSS feeds. I now only subscribe to family blogs and photo feeds, as well as a few key tech/programming resources like &lt;a href=&quot;http://www.37signals.com/svn&quot; title=&quot;37Signals blog&quot;&gt;37Signals&lt;/a&gt; and &lt;a href=&quot;http://www.codinghorror.com&quot; title=&quot;Jeff Attwood's blog&quot;&gt;Jeff Attwood's blog&lt;/a&gt; (and yes, &lt;a href=&quot;http://www.xkcd.com&quot; title=&quot;XKCD comic&quot;&gt;xkcd&lt;/a&gt; made the cut).&lt;/p&gt;

&lt;p&gt;You may be perplexed by my actions. To tell you the truth, I am still a bit perplexed that I actually went through with it. Quite a few months ago I went through a similar purging excercise, but not to the extent of deleting accounts. The best answer I can give is that I feel like my need to consume and digest information is completely getting in the way of my progress as a programmer and human being. I crave it, need it, just like a drug. And some days it's all I can think about and act upon.&lt;/p&gt;

&lt;p&gt;I'm not sure if I'll ever create a facebook account again, as much as I really did enjoy it when I had a small number of friends who mattered to me. I am fairly certain, however, that I will utilize twitter at some point in the future as owning a business becomes more a part of my day to day activity. But for now, I'm partially following _why's example and turning off the invention in order to subdue the necessity. Here's to learning how to focus. Cheers.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4&gt;Notes&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a name=&quot;note1&quot;&gt;&lt;/a&gt;I have never done, nor plan to do any research on the invention of the washing machine (or computer). :)&lt;/li&gt;
&lt;/ol&gt;

</content>
  </entry>
  
  <entry>
    <title>Why you want me to work for you</title>
    <link href="http://rand9.com/blog/why-you-want-me-to-work-for-you"/>
    <updated>2009-08-18T23:34:33-06:00</updated>
    <id>http://rand9.com/blog/why-you-want-me-to-work-for-you</id>
    <content type="html">&lt;p&gt;The day you have all been waiting for has finally arrived: rand9 Technologies is officially accepting clients for projects in &lt;strong&gt;Web Application Development&lt;/strong&gt;, &lt;strong&gt;Graphic Design&lt;/strong&gt; (including &lt;strong&gt;Logo&lt;/strong&gt; &amp;amp; &lt;strong&gt;Site Design&lt;/strong&gt;), and &lt;strong&gt;Software Project Consultation&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This article is meant to detail my desire to start building a successful client-work business.&lt;/p&gt;

&lt;p&gt;Quite often I'm approached by friends, family, or associates about building [insert application name here], or desinging the branding for [company xyz]. Up until a few weeks ago my response is generally somewhere along the lines of, &quot;Thanks, but no thanks.&quot; All that has changed recently as I've decided to turn rand9 into a full-fledged client-work business. I'll be focusing on three areas of my expertise, detailed below, but if you have any work that falls outside of these lines, please don't hesitate to &lt;a href=&quot;mailto:bj.neilsen@gmail.com?subject=rand9%20Project%20Proposal&quot;&gt;contact me&lt;/a&gt; and we can discuss your project.&lt;/p&gt;

&lt;h3&gt;Web Application Development&lt;/h3&gt;

&lt;p&gt;I've been finagling web applications for the past 7 years in PHP, Java, and Ruby. On one hand, I've worked on horrible hack-job projects, often outsourced to India; &quot;Apps&quot; that you couldn't really call Apps at all. On the other hand, I've worked on beautifully crafted Object-oriented systems that were well thought out and cleanly implemented. In other words, I've been around the web application block a few times. I've seen enough to know what works well, what will most likely do the job, and what is doomed to failure.&lt;/p&gt;

&lt;p&gt;My application development experience leans almost exclusively towards framework-driven object architectures. It's a fancy way of saying, &quot;I believe in and use extensively stable and up-to-date programming software and practices.&quot; I've custom-built everything from a simple blog to a PDF-processing Web-to-Print software engine that supports private-branded portals.&lt;/p&gt;

&lt;h3&gt;Graphic Design&lt;/h3&gt;

&lt;p&gt;My software background is complemented beautifully by my design capabilities. I've been studying usability and design for over a decade, and have regularly put out logos, site designs, and print work for a variety of project scopes and mediums. I've designed posters for the Children's Miracle Network, Logos for several startup companies, and numerous site designs. I'm even available to design and build micro-layouts within an already designed site.&lt;/p&gt;

&lt;h3&gt;Software Project Consultation&lt;/h3&gt;

&lt;p&gt;It may sound incredibly nerdy, but I &lt;strong&gt;&lt;em&gt;love&lt;/em&gt;&lt;/strong&gt; talking about software. I love to discuss the theory behind the implementation, to critique the pattern-flow of an object architecture, to assess the feasability of an object-relational mapper. In short, I love to talk about what makes a project successful for the Businesses as well as exciting for the Developers writing the code. If your project is headed off the track, you need another pair of eyes to determine what is going wrong and how to get back on the track.&lt;/p&gt;

&lt;h3&gt;Other Project Needs&lt;/h3&gt;

&lt;p&gt;If you have any other projects that might not fit the molds above, feel free to &lt;a href=&quot;mailto:bj.neilsen@gmail.com?subject=rand9%20Project%20Proposal&quot;&gt;contact me&lt;/a&gt; and I can assist or point you in the right direction (if I can).&lt;/p&gt;

&lt;h3&gt;What are you waiting for? Let's build something awesome together!&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt; BJ Neilsen&lt;br/&gt;
&lt;strong&gt;Email:&lt;/strong&gt; &lt;a href=&quot;mailto:bj.neilsen@gmail.com?subject=rand9%20Project%20Proposal&quot;&gt;bj.neilsen@gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;object type=&quot;application/x-shockwave-flash&quot; data=&quot;https://clients4.google.com/voice/embed/webCallButton&quot; width=&quot;230&quot; height=&quot;85&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;https://clients4.google.com/voice/embed/webCallButton&quot; /&gt;&lt;param name=&quot;wmode&quot; value=&quot;transparent&quot; /&gt;&lt;param name=&quot;FlashVars&quot; value=&quot;id=8eda661fa0af296f057d048650ed039044e7bddd&amp;style=0&quot; /&gt;&lt;/object&gt;



</content>
  </entry>
  
  <entry>
    <title>Movin' on over</title>
    <link href="http://rand9.com/blog/movin-on-over"/>
    <updated>2009-08-11T05:57:28-06:00</updated>
    <id>http://rand9.com/blog/movin-on-over</id>
    <content type="html">&lt;p&gt;As you probably can tell, I've gone quiet on the blogging front for a while. It's not you, it's me. I've been lacking creatively for quite a while, being energetically drained by numerous sources that you don't really need to worry yourselves over. Needless to say, I'm back into blogging form, or am attempting it yet again.&lt;/p&gt;

&lt;p&gt;I'll likely be transitioning over to my new blog &lt;a href=&quot;http://www.rand9.com&quot; title=&quot;rand9.com&quot;&gt;rand9.com&lt;/a&gt;. I had initially intended to only post tech-specific things on that blog, and keep more personal matters over here, but this post changed my mind. I want to focus my energy on one blog, and I feel like the rand9 name is what I want to put my energy into.&lt;/p&gt;

&lt;p&gt;Fear not, I will continue to strive to put more content than just tech stuff over there, so you will still get the usual banter and rantings. I still plan on posting a lot about entrepreneurialism and projects that I'm engaged in. So head on over to the &lt;a href=&quot;http://www.rand9.com&quot;&gt;new blog&lt;/a&gt; and give the few articles a read. Oh, and if you've subscribed to this blog's RSS feed, be sure to do so &lt;a href=&quot;http://feeds.feedburner.com/rand9&quot;&gt;over there&lt;/a&gt; as well. Thanks for all the feedback over this last year on these posts!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Doing my own thing</title>
    <link href="http://rand9.com/blog/doing-my-own-thing"/>
    <updated>2009-08-11T04:44:33-06:00</updated>
    <id>http://rand9.com/blog/doing-my-own-thing</id>
    <content type="html">&lt;p&gt;In which I describe some of the ideas and thoughts behind my entrepreneurial spirit. It's a bit of a rambler, but was very therapeutic for me in the writing.&lt;/p&gt;

&lt;p&gt;Yesterday I read an &lt;a href=&quot;http://articles.marco.org/261&quot; title=&quot;Marco Arment's \&amp;quot;Do your own thing\&amp;quot; Post&quot;&gt;inspiring and enlightening post&lt;/a&gt; from &lt;a href=&quot;http://marco.org&quot; title=&quot;Marco Arment&quot;&gt;Marco Arment&lt;/a&gt; titled &lt;strong&gt;&quot;Do your own thing&quot;&lt;/strong&gt;. In the post he talks about gaining acceptance from the stoners at school simply because he &quot;does [his] own thing&quot; rather than the accepted norm of &quot;partying&quot;. He describes:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;A stoned guy’s idle conversation became the goal for my life outlook. No other statement or occurrence has been more fundamental in making me stop worrying about what other people think and do, which in turn makes it true.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;In a rich man's world ...&lt;/h3&gt;

&lt;p&gt;Lately I've had a lot of thought units (similar to &lt;a href=&quot;http://www.brianregan.com/&quot; title=&quot;Brian Regan&quot;&gt;goal units&lt;/a&gt; ;)) focused and concetrating on developing a monetizable business product. &lt;em&gt;&quot;But&quot;, you say, &quot;I thought you were running &lt;a href=&quot;http://www.onesimplegoal.com&quot; title=&quot;One Simple Goal&quot;&gt;One Simple Goal&lt;/a&gt;, the fastest growing web presence next to AOL and Friendster!&quot;&lt;/em&gt; Hold your horses there friend. To debunk you on two points:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;OSG is not fast* or growing (much to my chagrin). Though, to be fair, I haven't really expected lots of popularity from it as I haven't had a chance to promote it properly... yet.&lt;/li&gt;
&lt;li&gt;OSG has no monetization value in its current offering. That's not to say I haven't &lt;em&gt;thought&lt;/em&gt; about monetizing it with ads or a &quot;Go Pro&quot; area where paying members get more tools and value. Just saying that I've only thought about it, but each time it's like pulling teeth. I know I just don't want to go through with that and ruin the OSG experience. 'Nuff said.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;That's not to say that I haven't thought/dreamt of owning or running a business of my own. It's actually something that I strive for every day, at all times some random background process in my head is slowly working on ideas and idealogies to move me forward in that quest. Obviously it'd go much quicker if I could work at it full time, but then the income would be scant for a while, which is basically a non-option at this point (i.e. mortgage, kids, food, etc). I mean, I know that other entrepreneur's do the boot-strap thing, but at my current state, I don't think it'd be wise or healthy to engage in that kind of masochism.&lt;/p&gt;

&lt;h3&gt;Back to our regularly scheduled program ...&lt;/h3&gt;

&lt;p&gt;Where were we? Oh yes, monetizing a business product. The whole &quot;doing your own thing&quot; tag is great in concept, but application is a bit more difficult to manage. I'm not saying it's anywhere approaching impossible or in the realm of moronic-thinking. Not saying that at all. I'm saying it takes dilligent and concerted effort. It takes knowing from the beginning what it is that you are searching for, searching to become. Because entrepreneurialism is really about &lt;strong&gt;&lt;em&gt;being&lt;/em&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;em&gt;becoming&lt;/em&gt;&lt;/strong&gt; something, not just having to report to yourself at work each day instead of &lt;a href=&quot;http://www.youtube.com/watch?v=k1Ejo-XKWmo&quot; title=&quot;Your stupid boss&quot;&gt;that guy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So who exactly am I trying to be or become? What does &quot;doing my own thing&quot; look like? I can honestly say that I'm still trying to figure that out. I've known for more than 3 years that doing my own thing is what I want in life. I want to dictate what I work on, who I work with, and (most imporantly) &lt;strong&gt;why&lt;/strong&gt; I am doing what I do. I'm a programmer, or developer, or whatever else you want to call me from that realm. That's the majority of my skillset, what I know how to do to make the cash. I've been building web applications in PHP and Java for over 6 years now, and I've gotten pretty dang good at it. Unfortunately it just hasn't been FUN for the last little while. Corporate mandates and bloated systems with bad code rot have kind of disenfranchised me from working on other people's projets (read: my current and previous employers).&lt;/p&gt;

&lt;h3&gt;Oh Ruuuuuuby, Don't take your love to town&lt;/h3&gt;

&lt;p&gt;Then along comes &lt;a href=&quot;http://www.ruby-lang.org/&quot; title=&quot;Ruby, the most wickedest programming language on earth&quot;&gt;Ruby&lt;/a&gt;, the most wicked-awesome programming language you've never heard of. Okay, maybe &lt;em&gt;you&lt;/em&gt; have, the guy in the back with the glasses. But the rest of you, you know nothing of it. So let me enlighten you. It's amazing. It really makes programming enjoyable, and dare I say, FUN again. One of my &lt;a href=&quot;http://twitter.com/localshred/status/3127072169&quot; title=&quot;One of my recent tweets&quot;&gt;recent tweets&lt;/a&gt; really describes it fully though:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I do more fist-pumping-programming in Ruby than Java. Probably a 10 to 1 ratio.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;So, recently the thought process has been to follow a ruby path towards entrepreneurialism. That may include doing side-projects in ruby, or even setting up a full-fledged Client-Work company (ala rand9?) solely dedicated to building apps in Ruby, Rails, Sinatra, etc. It may involve getting heavily involved in building an app with a real monetization strategy, like a service people are willing to pay for (&lt;em&gt;Huzzah! for good ideas&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Whatever makes programming fun again, that's how I'll do my own thing.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;*Playful banter, you say? Go check out the awful performance lag for each request. It makes me madder than it makes you, I promise.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
</feed>
